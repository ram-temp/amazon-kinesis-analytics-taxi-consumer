AWSTemplateFormatVersion: 2010-09-09

Description: Infrastructure to deploy and run the kinesis-analytics-taxi-consumer Flink application as a Kinesis Data Analytics for Java application

Parameters:
  SshKeyName:
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  ClientIpAddressRange:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: IP address range that is able to SSH into the EC2 instance and that gets full read and write access to the Elasticsearch Cluster and the Kibana dashboard
    MaxLength: 18
    MinLength: 9
    Type: String

  FlinkApplicationS3BucketArn:
    Type: String

  FlinkApplicationS3Path:
    Type: String

  KinesisReplayCopyCommand:
    Type: String


Outputs:
  KinesisReplayInstance:
    Description: SSH connection to the instance that ingests trip events into the Kinesis stream
    Value: !Sub ssh -i ~/.ssh/${SshKeyName}.pem ec2-user@${KinesisReplayInstance.PublicDnsName}

  ProducerCommand:
    Description: Command to populate Kinesis stream with taxi trip events
    Value: !Sub java -jar amazon-kinesis-replay-*.jar -streamName ${InputKinesisStream} -streamRegion ${AWS::Region} -aggregate -speedup 2000 -objectPrefix artifacts/kinesis-analytics-taxi-consumer/taxi-trips-partitioned.json.lz4/

  CloudWatchDashboardURL:
    Description: URL to access metrics in a CloudWatch dasboard
    Value: !Sub https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${CloudWatchDashboard}

  OutputDataBucket:
    Description: Output Data Bucket
    Value: !Sub ${OutputDataS3Bucket}

  InputDataAccumulatorBucket:
    Description: Input Data Accumulator Bucket
    Value: !Sub ${PersistInputS3Bucket}



Resources:
  InputKinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 24

  OutputDataS3Bucket:
    Type: AWS::S3::Bucket

  OutputDataDeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'

  OutputDataDeliveryPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: firehose_outputdatadelivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Sub 'arn:aws:s3:::${OutputDataS3Bucket}'
              - !Sub 'arn:aws:s3:::${OutputDataS3Bucket}/*'
      Roles:
        - !Ref OutputDataDeliveryRole

  OutputDataDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${OutputDataS3Bucket}'
        BufferingHints:
          IntervalInSeconds: 60
          SizeInMBs: 20
        CompressionFormat: UNCOMPRESSED
        ErrorOutputPrefix: "myErrorPrefix/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/!{firehose:error-output-type}"
        Prefix: "data/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/"
        RoleARN: !GetAtt OutputDataDeliveryRole.Arn

  PersistInputS3Bucket:
    Type: AWS::S3::Bucket


  PersistInputFirehoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        -
          PolicyName: root
          PolicyDocument:
            !Sub |
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Action": "s3:*",
                          "Resource": [
                              "arn:aws:s3:::${PersistInputS3Bucket}",
                              "arn:aws:s3:::${PersistInputS3Bucket}/*"
                          ]
                      },
                      {
                          "Effect": "Allow",
                          "Action": "kinesis:*",
                          "Resource": "${InputKinesisStream.Arn}"
                      }
                  ]
              }

  PersistInputFirehoseStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: KinesisStreamAsSource
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub 'arn:aws:s3:::${PersistInputS3Bucket}'
        BufferingHints:
          IntervalInSeconds: 300
          SizeInMBs: 128
        CompressionFormat: UNCOMPRESSED
        ErrorOutputPrefix: "myErrorPrefix/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/!{firehose:error-output-type}"
        Prefix: "data/year=!{timestamp:yyyy}/month=!{timestamp:MM}/day=!{timestamp:dd}/hour=!{timestamp:HH}/"
        RoleARN: !GetAtt PersistInputFirehoseRole.Arn
      KinesisStreamSourceConfiguration:
          KinesisStreamARN: !GetAtt InputKinesisStream.Arn
          RoleARN: !GetAtt PersistInputFirehoseRole.Arn

  KinesisAnalyticsFlinkApplication:
    Type: AWS::KinesisAnalyticsV2::Application
    Properties:
      RuntimeEnvironment: FLINK-1_8
      ServiceExecutionRole: !Sub ${KinesisAnalyticsServiceRole.Arn}
      ApplicationConfiguration:
        ApplicationCodeConfiguration:
          CodeContent:
            S3ContentLocation:
              BucketARN: !Ref FlinkApplicationS3BucketArn
              FileKey: !Ref FlinkApplicationS3Path
          CodeContentType: ZIPFILE
        EnvironmentProperties:
          PropertyGroups:
            - PropertyGroupId: FlinkApplicationProperties
              PropertyMap:
                ElasticsearchEndpoint: !Sub ${OutputDataDeliveryStream}
                OutputFirehoseStream: !Sub ${OutputDataDeliveryStream}
                EventTime: true
                InputStreamName: !Sub ${InputKinesisStream}
                Region: !Sub ${AWS::Region}
        FlinkApplicationConfiguration:
          MonitoringConfiguration:
            ConfigurationType: CUSTOM
            LogLevel: INFO
            MetricsLevel: TASK
        ApplicationSnapshotConfiguration:
          SnapshotsEnabled: true


  KinesisAnalyticsLogging:
    Type: "AWS::KinesisAnalyticsV2::ApplicationCloudWatchLoggingOption"
    Properties:
      ApplicationName: !Sub ${KinesisAnalyticsFlinkApplication}
      CloudWatchLoggingOption:
        LogStreamARN: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${FlinkLogGroup}:log-stream:${FlinkLogStream}

  FlinkLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  FlinkLogStream:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref FlinkLogGroup


  FlinkNotProcessingFromKinesisAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if Flink stops reading from the Kinesis stream or falls behind processing the available data
      Namespace: AWS/KinesisAnalytics
      MetricName: millisBehindLatest
      Dimensions:
        - Name: Id
          Value: !Join ["_", !Split ["-", !Ref InputKinesisStream]]
        - Name: Application
          Value: !Sub ${KinesisAnalyticsFlinkApplication}
        - Name: Flow
          Value: Input
      Statistic: Maximum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 60000
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: breaching


  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub ${AWS::StackName}-dashboard
      DashboardBody: !Sub
        - |
          {
              "widgets": [
                  {
                      "type": "metric",
                      "x": 0,
                      "y": 0,
                      "width": 21,
                      "height": 6,
                      "properties": {
                          "view": "timeSeries",
                          "stacked": false,
                          "metrics": [
                              [ "AWS/EC2", "CPUUtilization", "InstanceId", "${KinesisReplayInstance}" ],
                              [ "AWS/Kinesis", "IncomingRecords", "StreamName", "${InputKinesisStream}", { "yAxis": "right", "stat": "Sum" } ]
                          ],
                          "region": "${AWS::Region}",
                          "period": 60,
                          "yAxis": {
                              "left": {
                                  "min": 0,
                                  "max": 100
                              }
                          }
                      }
                  },
                  {
                      "type": "metric",
                      "x": 0,
                      "y": 0,
                      "width": 21,
                      "height": 6,
                      "properties": {
                          "metrics": [
                              [ "KinesisProducerLibrary", "UserRecordsPut", "StreamName", "${InputKinesisStream}" ],
                              [ ".", "KinesisRecordsPut", ".", "." ],
                              [ "AWS/Kinesis", "IncomingBytes", ".", ".", { "yAxis": "right" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${AWS::Region}",
                          "stat": "Sum",
                          "title": "Kinesis Stream Incoming Records",
                          "period": 60
                      }
                  },
                  {
                      "type": "metric",
                      "x": 0,
                      "y": 6,
                      "width": 21,
                      "height": 6,
                      "properties": {
                          "metrics": [
                              [ "AWS/Kinesis", "ReadProvisionedThroughputExceeded", "StreamName", "${InputKinesisStream}" ],
                              [ ".", "WriteProvisionedThroughputExceeded", ".", ".", { "yAxis": "right" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${AWS::Region}",
                          "stat": "Average",
                          "title": "Kinesis Stream Throttling Metrics",
                          "period": 60
                      }
                  },
                  {
                      "type": "metric",
                      "x": 0,
                      "y": 12,
                      "width": 21,
                      "height": 6,
                      "properties": {
                          "metrics": [
                              [ "AWS/Kinesis", "GetRecords.Bytes", "StreamName", "${InputKinesisStream}" ],
                              [ "AWS/KinesisAnalytics", "millisBehindLatest", "Id", "${KinesisStreamNameUnderscore}", "Application", "${KinesisAnalyticsFlinkApplication}", "Flow", "Input", { "yAxis": "right", "stat": "Maximum" } ]
                          ],
                          "view": "timeSeries",
                          "stacked": false,
                          "region": "${AWS::Region}",
                          "stat": "Sum",
                          "title": "Kinesis Analytics Application Metrics",
                          "period": 60
                      }
                  },
                  {
                      "type": "log",
                      "x": 0,
                      "y": 24,
                      "width": 21,
                      "height": 6,
                      "properties": {
                          "query": "SOURCE '${FlinkLogGroup}' | fields @timestamp, message\n| sort @timestamp desc\n| limit 1000",
                          "region": "${AWS::Region}",
                          "title": "Kinesis Analytics Application Logs"
                      }
                  }
              ]
          }
        - { KinesisStreamNameUnderscore: !Join ["_", !Split ["-", !Ref InputKinesisStream]] }


  KinesisReplayInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - !Ref AWS::Region
        - HVM64
      Monitoring: true
      InstanceType: c5.xlarge
      IamInstanceProfile: !Ref KinesisReplayInstanceProfile
      KeyName: !Ref SshKeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        DeviceIndex: 0
        GroupSet:
        - !GetAtt KinesisReplayInstanceSecurityGroup.GroupId
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Sub ${AWS::StackName}-producer-instance
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x

            yum update -y
            yum install -y tmux

            # install Java 11
            amazon-linux-extras enable java-openjdk11
            yum install -y java-11-openjdk

            # wait until CF stack, in particular the EIP association, was created successfully
            aws --region ${AWS::Region} cloudformation wait stack-create-complete --stack-name '${AWS::StackName}'

            # start the Flink application
            aws --region ${AWS::Region} kinesisanalyticsv2 start-application --application-name ${KinesisAnalyticsFlinkApplication} --run-configuration '{ "ApplicationRestoreConfiguration": { "ApplicationRestoreType": "RESTORE_FROM_LATEST_SNAPSHOT" } }'

            # copy the replay Java app from s3
            su ec2-user -l -c "${KinesisReplayCopyCommand}"


  KinesisReplayInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub allow SSH access from ${ClientIpAddressRange}
      SecurityGroupIngress:
      - CidrIp: !Ref ClientIpAddressRange
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22

  KinesisReplayInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: KinesisReplayRole

  KinesisReplayInstanceIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  KinesisReplayInstanceIpAssiciation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref KinesisReplayInstance
      AllocationId: !GetAtt KinesisReplayInstanceIp.AllocationId


  KinesisReplayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: root
          PolicyDocument:
            !Sub |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "kinesisanalytics:CreateApplication",
                          "kinesisanalytics:StartApplication"
                      ],
                      "Resource": "arn:aws:kinesisanalytics:${AWS::Region}:${AWS::AccountId}:application/${KinesisAnalyticsFlinkApplication}"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "kinesis:DescribeStream",
                          "kinesis:ListShards",
                          "kinesis:GetShardIterator",
                          "kinesis:GetRecords",
                          "kinesis:PutRecord",
                          "kinesis:PutRecords"
                      ],
                      "Resource": "${InputKinesisStream.Arn}"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "cloudwatch:PutMetricData"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": "cloudformation:DescribeStacks",
                      "Resource": "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "s3:GetObject",
                          "s3:ListBucket"
                      ],
                      "Resource": [
                        "${FlinkApplicationS3BucketArn}",
                        "arn:aws:s3:::aws-bigdata-blog",
                        "${FlinkApplicationS3BucketArn}/*",
                        "arn:aws:s3:::aws-bigdata-blog/*"
                      ]
                  }
                ]
              }


  KinesisAnalyticsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "kinesisanalytics.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        -
          PolicyName: root
          PolicyDocument:
            !Sub |
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Action": [
                              "s3:GetObject",
                              "s3:GetObjectVersion"
                          ],
                          "Resource": [
                              "${FlinkApplicationS3BucketArn}/*"
                          ]
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "logs:DescribeLogGroups"
                          ],
                          "Resource": [
                              "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
                          ]
                      },
                      {
                          "Effect": "Allow",
                          "Action": [
                              "logs:DescribeLogStreams",
                              "logs:PutLogEvents"
                          ],
                          "Resource": [
                              "${FlinkLogGroup.Arn}"
                          ]
                      },
                      {
                          "Effect": "Allow",
                          "Action": "kinesis:*",
                          "Resource": "${InputKinesisStream.Arn}"
                      },
                      {
                          "Sid": "WriteDeliveryStream",
                          "Effect": "Allow",
                          "Action": "firehose:*",
                          "Resource": "${OutputDataDeliveryStream.Arn}"
                      }
                  ]
              }

Mappings:
  AWSRegionArch2AMI:
    eu-central-1:
      HVM64: ami-0f3a43fbf2d3899f7
    eu-west-1:
      HVM64: ami-07683a44e80cd32c5
    us-west-2:
      HVM64: ami-061392db613a6357b
    us-east-1:
      HVM64: ami-0de53d8956e8dcf80
    us-east-2:
      HVM64: ami-02bcbb802e03574ba
