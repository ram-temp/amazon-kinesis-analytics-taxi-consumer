AWSTemplateFormatVersion: 2010-09-09

Description: Infrastructure to deploy and run Kinesis Producer application.

Parameters:
  SshKeyName:
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName

  ClientIpAddressRange:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: IP address range that is able to SSH into the EC2 instance and that gets full read and write access to the Elasticsearch Cluster and the Kibana dashboard
    MaxLength: 18
    MinLength: 9
    Type: String

  ArtifactBucketArn:
    Type: String

  InputKinesisStreamName:
    Type: String
  
  KinesisProducerCopyCommand:
    Type: String

Outputs:
  KinesisProducerSshCommand:
    Description: SSH connection to the instance that ingests trip events into the Kinesis stream
    Value: !Sub ssh -i ~/.ssh/${SshKeyName}.pem ec2-user@${KinesisReplayInstance.PublicDnsName}

  KinesisProducerRunCommand:
    Description: Command to populate Kinesis stream with taxi trip events
    Value: !Sub java -jar amazon-kinesis-replay-*.jar -streamName ${InputKinesisStreamName} -streamRegion ${AWS::Region} -aggregate -speedup 800 -objectPrefix artifacts/kinesis-analytics-taxi-consumer/taxi-trips-partitioned.json.lz4/

Resources:

  KinesisReplayInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - !Ref AWS::Region
        - HVM64
      Monitoring: true
      InstanceType: c5.xlarge
      IamInstanceProfile: !Ref KinesisReplayInstanceProfile
      KeyName: !Ref SshKeyName
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        DeviceIndex: 0
        GroupSet:
        - !GetAtt KinesisReplayInstanceSecurityGroup.GroupId
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Name
        Value: !Sub ${AWS::StackName}-producer-instance
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -x

            yum update -y
            yum install -y tmux

            # install Java 11
            amazon-linux-extras enable java-openjdk11
            yum install -y java-11-openjdk

            # wait until CF stack, in particular the EIP association, was created successfully
            aws --region ${AWS::Region} cloudformation wait stack-create-complete --stack-name '${AWS::StackName}'

            # copy the replay Java app from s3
            su ec2-user -l -c "${KinesisProducerCopyCommand}"

            # run the producer java app
            su ec2-user -l -c "java -jar amazon-kinesis-replay-*.jar -streamName ${InputKinesisStreamName} -streamRegion ${AWS::Region} -aggregate -speedup 800 -objectPrefix artifacts/kinesis-analytics-taxi-consumer/taxi-trips-partitioned.json.lz4/ &>> producer.out &"


  KinesisReplayInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub allow SSH access from ${ClientIpAddressRange}
      SecurityGroupIngress:
      - CidrIp: !Ref ClientIpAddressRange
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22

  KinesisReplayInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: KinesisReplayRole

  KinesisReplayInstanceIp:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  KinesisReplayInstanceIpAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref KinesisReplayInstance
      AllocationId: !GetAtt KinesisReplayInstanceIp.AllocationId


  KinesisReplayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: root
          PolicyDocument:
            !Sub |
              {
                "Version": "2012-10-17",
                "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "kinesis:DescribeStream",
                          "kinesis:ListShards",
                          "kinesis:GetShardIterator",
                          "kinesis:GetRecords",
                          "kinesis:PutRecord",
                          "kinesis:PutRecords"
                      ],
                      "Resource": "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${InputKinesisStreamName}"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "cloudwatch:PutMetricData"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": "cloudformation:DescribeStacks",
                      "Resource": "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "s3:GetObject",
                          "s3:ListBucket"
                      ],
                      "Resource": [
                        "${ArtifactBucketArn}",
                        "arn:aws:s3:::aws-bigdata-blog",
                        "${ArtifactBucketArn}/*",
                        "arn:aws:s3:::aws-bigdata-blog/*"
                      ]
                  }
                ]
              }


Mappings:
  AWSRegionArch2AMI:
    eu-central-1:
      HVM64: ami-0f3a43fbf2d3899f7
    eu-west-1:
      HVM64: ami-07683a44e80cd32c5
    us-west-2:
      HVM64: ami-061392db613a6357b
    us-east-1:
      HVM64: ami-0de53d8956e8dcf80
    us-east-2:
      HVM64: ami-02bcbb802e03574ba
